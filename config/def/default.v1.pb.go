// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: config/def/default.v1.proto

package def

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Log_LogLevelEnum int32

const (
	Log_LOG_LEVEL_UNSPECIFIED Log_LogLevelEnum = 0
	Log_DEBUG                 Log_LogLevelEnum = 1
	Log_INFO                  Log_LogLevelEnum = 2
	Log_WARN                  Log_LogLevelEnum = 3
	Log_ERROR                 Log_LogLevelEnum = 4
	Log_FATAL                 Log_LogLevelEnum = 5
)

// Enum value maps for Log_LogLevelEnum.
var (
	Log_LogLevelEnum_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "DEBUG",
		2: "INFO",
		3: "WARN",
		4: "ERROR",
		5: "FATAL",
	}
	Log_LogLevelEnum_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"DEBUG":                 1,
		"INFO":                  2,
		"WARN":                  3,
		"ERROR":                 4,
		"FATAL":                 5,
	}
)

func (x Log_LogLevelEnum) Enum() *Log_LogLevelEnum {
	p := new(Log_LogLevelEnum)
	*p = x
	return p
}

func (x Log_LogLevelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Log_LogLevelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_config_def_default_v1_proto_enumTypes[0].Descriptor()
}

func (Log_LogLevelEnum) Type() protoreflect.EnumType {
	return &file_config_def_default_v1_proto_enumTypes[0]
}

func (x Log_LogLevelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Log_LogLevelEnum.Descriptor instead.
func (Log_LogLevelEnum) EnumDescriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{8, 0}
}

// Server 服务
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http http服务配置
	Http *Registry `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	// grpc grpc服务配置
	Grpc *Registry `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{0}
}

func (x *Server) GetHttp() *Registry {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Server) GetGrpc() *Registry {
	if x != nil {
		return x.Grpc
	}
	return nil
}

type Tracing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       bool    `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`                                   // 是否启用链路跟踪
	Endpoint     string  `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                                // 链路跟踪的 collector 服务地址, 默认为 127.0.0.1:4318
	UrlPath      string  `protobuf:"bytes,3,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`                   // 链路跟踪接口 collector 接口路径 , 默认为 /api/traces
	SimpleRate   float64 `protobuf:"fixed64,4,opt,name=simple_rate,json=simpleRate,proto3" json:"simple_rate,omitempty"`        // 日志采样比例
	Type         string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                        // 链路跟踪类型，不启用时使用 memory, 启用时为 jaeger
	MaxBatchSize int32   `protobuf:"varint,6,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty"` // 最大的批量提交数
	MaxQueueSize int32   `protobuf:"varint,7,opt,name=max_queue_size,json=maxQueueSize,proto3" json:"max_queue_size,omitempty"` // 最大的缓存队列大小
}

func (x *Tracing) Reset() {
	*x = Tracing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing) ProtoMessage() {}

func (x *Tracing) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing.ProtoReflect.Descriptor instead.
func (*Tracing) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{1}
}

func (x *Tracing) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Tracing) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Tracing) GetUrlPath() string {
	if x != nil {
		return x.UrlPath
	}
	return ""
}

func (x *Tracing) GetSimpleRate() float64 {
	if x != nil {
		return x.SimpleRate
	}
	return 0
}

func (x *Tracing) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Tracing) GetMaxBatchSize() int32 {
	if x != nil {
		return x.MaxBatchSize
	}
	return 0
}

func (x *Tracing) GetMaxQueueSize() int32 {
	if x != nil {
		return x.MaxQueueSize
	}
	return 0
}

type Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable  bool                 `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`  // 是否启用该 Service
	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // 服务名
	Version string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // 服务版本
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"` // 该服务的超时时间
	Address string               `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"` // 服务地址 - 一般为域名，服务发现能力由运维环境提供，如果需要私有化部署可配置为服务 IP
	Type    string               `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`       // 服务类型, grpc/http
}

func (x *Registry) Reset() {
	*x = Registry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{2}
}

func (x *Registry) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Registry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Registry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Registry) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Registry) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Registry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *Database `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Redis    *Redis    `protobuf:"bytes,2,opt,name=redis,proto3" json:"redis,omitempty"`
	Mongodb  *Mongo    `protobuf:"bytes,3,opt,name=mongodb,proto3" json:"mongodb,omitempty"`
	RabbitMq *RabbitMQ `protobuf:"bytes,4,opt,name=rabbitMq,proto3" json:"rabbitMq,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Data) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Data) GetMongodb() *Mongo {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

func (x *Data) GetRabbitMq() *RabbitMQ {
	if x != nil {
		return x.RabbitMq
	}
	return nil
}

type RabbitMQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses  string               `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`                     // 服务的连接地址
	Vhost      string               `protobuf:"bytes,2,opt,name=vhost,proto3" json:"vhost,omitempty"`                             // 虚拟主机名，后期可用于做隔离
	Retry      int32                `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty"`                            // 连接的重试次数
	ClientName string               `protobuf:"bytes,4,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"` // 客户端标识符
	Heartbeat  *durationpb.Duration `protobuf:"bytes,5,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`                     // 连接心跳检测间隔
}

func (x *RabbitMQ) Reset() {
	*x = RabbitMQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabbitMQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQ) ProtoMessage() {}

func (x *RabbitMQ) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQ.ProtoReflect.Descriptor instead.
func (*RabbitMQ) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{4}
}

func (x *RabbitMQ) GetAddresses() string {
	if x != nil {
		return x.Addresses
	}
	return ""
}

func (x *RabbitMQ) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

func (x *RabbitMQ) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *RabbitMQ) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *RabbitMQ) GetHeartbeat() *durationpb.Duration {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

type ExchangeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // 交换机名称
	Kind       string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                                // 交换机类型，direct/fanout/topic/header , 一般只需要用到前三者
	Durable    bool   `protobuf:"varint,3,opt,name=durable,proto3" json:"durable,omitempty"`                         // 交换机是否持久化, 持久化的交换机在重启后不会丢失
	AutoDelete bool   `protobuf:"varint,4,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"` // 交换机的是否会在消费后自动删除, 设置为 false 的话能够更好的保存数据，并在全局层面进行管理
}

func (x *ExchangeConfig) Reset() {
	*x = ExchangeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeConfig) ProtoMessage() {}

func (x *ExchangeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeConfig.ProtoReflect.Descriptor instead.
func (*ExchangeConfig) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ExchangeConfig) GetDurable() bool {
	if x != nil {
		return x.Durable
	}
	return false
}

func (x *ExchangeConfig) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

type QueueConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // 消息名称
	ExchangeName string `protobuf:"bytes,2,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"` // 使用的交换机名称, 一般可保持与消息名一致
	Durable      bool   `protobuf:"varint,3,opt,name=durable,proto3" json:"durable,omitempty"`                              // 队列是否持久化，持久化的队列在重启后不会消失
	AutoDelete   bool   `protobuf:"varint,4,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"`      // 队列的是否会在消费后自动删除, 设置为 false 的话能够更好的保存数据，并在全局层面进行管理
	RoutingKey   string `protobuf:"bytes,5,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`       // 队列的路由字段，通过该字段与交换机建立绑定，后续交换机收到消息时会将消息送给匹配路由的队列
}

func (x *QueueConfig) Reset() {
	*x = QueueConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConfig) ProtoMessage() {}

func (x *QueueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConfig.ProtoReflect.Descriptor instead.
func (*QueueConfig) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{6}
}

func (x *QueueConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueConfig) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *QueueConfig) GetDurable() bool {
	if x != nil {
		return x.Durable
	}
	return false
}

func (x *QueueConfig) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

func (x *QueueConfig) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

type ConsumeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                    // 消费者的名称
	AutoAck          bool   `protobuf:"varint,2,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`                              // 是否自动提交 ACK
	NoWait           bool   `protobuf:"varint,3,opt,name=no_wait,json=noWait,proto3" json:"no_wait,omitempty"`                                 // 是否不等待连接完成, 一般设置为 false
	QosPrefetchSize  int32  `protobuf:"varint,4,opt,name=qos_prefetch_size,json=qosPrefetchSize,proto3" json:"qos_prefetch_size,omitempty"`    // 允许缓冲在内存的消息数，默认为 0, 只有在存在大量消息需要消费时使用，用于提高吞吐量
	QosPrefetchCount int32  `protobuf:"varint,5,opt,name=qos_prefetch_count,json=qosPrefetchCount,proto3" json:"qos_prefetch_count,omitempty"` // 允许缓冲在内存的字节数，默认为 0，一般不做配置
}

func (x *ConsumeConfig) Reset() {
	*x = ConsumeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeConfig) ProtoMessage() {}

func (x *ConsumeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeConfig.ProtoReflect.Descriptor instead.
func (*ConsumeConfig) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{7}
}

func (x *ConsumeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConsumeConfig) GetAutoAck() bool {
	if x != nil {
		return x.AutoAck
	}
	return false
}

func (x *ConsumeConfig) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *ConsumeConfig) GetQosPrefetchSize() int32 {
	if x != nil {
		return x.QosPrefetchSize
	}
	return 0
}

func (x *ConsumeConfig) GetQosPrefetchCount() int32 {
	if x != nil {
		return x.QosPrefetchCount
	}
	return 0
}

// Log 日志
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Console 输出到控制台
	Console *Log_Console `protobuf:"bytes,1,opt,name=console,proto3" json:"console,omitempty"`
	// Graylog 输出到文件
	Graylog *Log_Graylog `protobuf:"bytes,2,opt,name=graylog,proto3" json:"graylog,omitempty"`
	// File 输出到文件
	File *Log_File `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{8}
}

func (x *Log) GetConsole() *Log_Console {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *Log) GetGraylog() *Log_Graylog {
	if x != nil {
		return x.Graylog
	}
	return nil
}

func (x *Log) GetFile() *Log_File {
	if x != nil {
		return x.File
	}
	return nil
}

type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool                 `protobuf:"varint,111,opt,name=enable,proto3" json:"enable,omitempty"`
	Addresses       []string             `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`                                          // Redis 节点地址
	Db              int32                `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`                                                       // 使用的数据库
	Username        string               `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                                            // 用户名
	Password        string               `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                                            // 密码
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,5,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`                   // 读取超时时间
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,6,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`                // 写入超时时间
	DialTimeout     *durationpb.Duration `protobuf:"bytes,7,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`                   // 连接超时时间
	MaxPoolSize     uint64               `protobuf:"varint,8,opt,name=max_pool_size,json=maxPoolSize,proto3" json:"max_pool_size,omitempty"`                // 最大的连接池数
	MaxPoolIdleSize uint64               `protobuf:"varint,9,opt,name=max_pool_idle_size,json=maxPoolIdleSize,proto3" json:"max_pool_idle_size,omitempty"`  // 最大连接数
	MinPoolIdleSize uint64               `protobuf:"varint,10,opt,name=min_pool_idle_size,json=minPoolIdleSize,proto3" json:"min_pool_idle_size,omitempty"` // 最小空闲链接
	MaxRetries      uint64               `protobuf:"varint,11,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`                    // 最大重试次数
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{9}
}

func (x *Redis) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Redis) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Redis) GetMaxPoolSize() uint64 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *Redis) GetMaxPoolIdleSize() uint64 {
	if x != nil {
		return x.MaxPoolIdleSize
	}
	return 0
}

func (x *Redis) GetMinPoolIdleSize() uint64 {
	if x != nil {
		return x.MinPoolIdleSize
	}
	return 0
}

func (x *Redis) GetMaxRetries() uint64 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

type Mongo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable            bool                 `protobuf:"varint,14,opt,name=enable,proto3" json:"enable,omitempty"`
	Address           string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`                                              // MongoDB 的连接字符串，支持集群的形式
	Hosts             []string             `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`                                                  // MongoDB 的集群地址列表
	Database          string               `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`                                            // 数据库名称
	MaxPoolSize       uint64               `protobuf:"varint,5,opt,name=max_pool_size,json=maxPoolSize,proto3" json:"max_pool_size,omitempty"`                // 最大空闲连接
	MinPoolSize       uint64               `protobuf:"varint,6,opt,name=min_pool_size,json=minPoolSize,proto3" json:"min_pool_size,omitempty"`                // 最小空闲连接
	MaxConnection     uint64               `protobuf:"varint,7,opt,name=max_connection,json=maxConnection,proto3" json:"max_connection,omitempty"`            // 最大连接数
	ConnectTimeout    *durationpb.Duration `protobuf:"bytes,8,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`          // 连接超时时间
	HeartbeatInterval *durationpb.Duration `protobuf:"bytes,9,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"` // 心跳间隔
	MaxConnIdleTime   *durationpb.Duration `protobuf:"bytes,10,opt,name=max_conn_idle_time,json=maxConnIdleTime,proto3" json:"max_conn_idle_time,omitempty"`
	Timeout           *durationpb.Duration `protobuf:"bytes,11,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Debug             bool                 `protobuf:"varint,12,opt,name=debug,proto3" json:"debug,omitempty"` // 是否开启调试模式
}

func (x *Mongo) Reset() {
	*x = Mongo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mongo) ProtoMessage() {}

func (x *Mongo) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mongo.ProtoReflect.Descriptor instead.
func (*Mongo) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{10}
}

func (x *Mongo) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Mongo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Mongo) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Mongo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Mongo) GetMaxPoolSize() uint64 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *Mongo) GetMinPoolSize() uint64 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *Mongo) GetMaxConnection() uint64 {
	if x != nil {
		return x.MaxConnection
	}
	return 0
}

func (x *Mongo) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Mongo) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *Mongo) GetMaxConnIdleTime() *durationpb.Duration {
	if x != nil {
		return x.MaxConnIdleTime
	}
	return nil
}

func (x *Mongo) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Mongo) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool                 `protobuf:"varint,9,opt,name=enable,proto3" json:"enable,omitempty"`
	Driver          string               `protobuf:"bytes,10,opt,name=driver,proto3" json:"driver,omitempty"` // 数据库的驱动，用于支持不同的数据库引擎, 如 mysql/sqlite/pgx
	Addr            string               `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`      // 数据库链接地址, 包含了地址/用户名/密码及数据库
	Database        string               `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	MaxPoolIdleSize uint64               `protobuf:"varint,4,opt,name=max_pool_idle_size,json=maxPoolIdleSize,proto3" json:"max_pool_idle_size,omitempty"` // 最大空闲连接
	MaxConnection   uint64               `protobuf:"varint,6,opt,name=max_connection,json=maxConnection,proto3" json:"max_connection,omitempty"`           // 最大连接数
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,7,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,8,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{11}
}

func (x *Database) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Database) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Database) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Database) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Database) GetMaxPoolIdleSize() uint64 {
	if x != nil {
		return x.MaxPoolIdleSize
	}
	return 0
}

func (x *Database) GetMaxConnection() uint64 {
	if x != nil {
		return x.MaxConnection
	}
	return 0
}

func (x *Database) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *Database) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableCpu bool   `protobuf:"varint,1,opt,name=enable_cpu,json=enableCpu,proto3" json:"enable_cpu,omitempty"` // 是否启用 CPU Profile
	EnableMem bool   `protobuf:"varint,2,opt,name=enable_mem,json=enableMem,proto3" json:"enable_mem,omitempty"` // 是否启用 Mem Profile
	CpuFile   string `protobuf:"bytes,3,opt,name=cpu_file,json=cpuFile,proto3" json:"cpu_file,omitempty"`        // CPU Profile 文件的保存地址
	MemFile   string `protobuf:"bytes,4,opt,name=mem_file,json=memFile,proto3" json:"mem_file,omitempty"`        // MEM Profile 文件的保存地址
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{12}
}

func (x *Profile) GetEnableCpu() bool {
	if x != nil {
		return x.EnableCpu
	}
	return false
}

func (x *Profile) GetEnableMem() bool {
	if x != nil {
		return x.EnableMem
	}
	return false
}

func (x *Profile) GetCpuFile() string {
	if x != nil {
		return x.CpuFile
	}
	return ""
}

func (x *Profile) GetMemFile() string {
	if x != nil {
		return x.MemFile
	}
	return ""
}

// Console 输出到控制台
type Log_Console struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启用
	Enable         bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Level          string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	UseJsonEncoder bool   `protobuf:"varint,3,opt,name=use_json_encoder,json=useJsonEncoder,proto3" json:"use_json_encoder,omitempty"`
}

func (x *Log_Console) Reset() {
	*x = Log_Console{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Console) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Console) ProtoMessage() {}

func (x *Log_Console) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Console.ProtoReflect.Descriptor instead.
func (*Log_Console) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Log_Console) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_Console) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log_Console) GetUseJsonEncoder() bool {
	if x != nil {
		return x.UseJsonEncoder
	}
	return false
}

// Graylog ...
type Log_Graylog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable        bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Level         string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	Proto         string `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	Addr          string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Facility      string `protobuf:"bytes,5,opt,name=facility,proto3" json:"facility,omitempty"`
	AsyncPoolSize int32  `protobuf:"varint,6,opt,name=async_pool_size,json=asyncPoolSize,proto3" json:"async_pool_size,omitempty"`
}

func (x *Log_Graylog) Reset() {
	*x = Log_Graylog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Graylog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Graylog) ProtoMessage() {}

func (x *Log_Graylog) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Graylog.ProtoReflect.Descriptor instead.
func (*Log_Graylog) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Log_Graylog) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_Graylog) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log_Graylog) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *Log_Graylog) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Log_Graylog) GetFacility() string {
	if x != nil {
		return x.Facility
	}
	return ""
}

func (x *Log_Graylog) GetAsyncPoolSize() int32 {
	if x != nil {
		return x.AsyncPoolSize
	}
	return 0
}

// File 输出到文件
type Log_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启用
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Level  string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// dir 存储目录
	Dir string `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
	// filename 文件名(默认：${filename}_app.%Y%m%d%H%M%S.log)
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	// rotate_time 轮询规则：n久(默认：86400s # 86400s = 1天)
	// 轮询规则：默认为：rotate_time
	RotateTime *durationpb.Duration `protobuf:"bytes,5,opt,name=rotate_time,json=rotateTime,proto3" json:"rotate_time,omitempty"`
	// rotate_size 轮询规则：按文件大小(默认：52428800 # 50<<20 = 50M)
	// 轮询规则：默认为：rotate_time
	RotateSize int64 `protobuf:"varint,6,opt,name=rotate_size,json=rotateSize,proto3" json:"rotate_size,omitempty"`
	// storage_age 存储n久(默认：2592000s = 30天)
	// 存储规则：默认为：storage_age
	StorageAge *durationpb.Duration `protobuf:"bytes,8,opt,name=storage_age,json=storageAge,proto3" json:"storage_age,omitempty"`
	// storage_counter 存储：n个 或 有效期storage_age(默认：2592000s = 30天)
	// 存储规则：默认为：storage_age
	StorageCounter uint32 `protobuf:"varint,7,opt,name=storage_counter,json=storageCounter,proto3" json:"storage_counter,omitempty"`
}

func (x *Log_File) Reset() {
	*x = Log_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_def_default_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_File) ProtoMessage() {}

func (x *Log_File) ProtoReflect() protoreflect.Message {
	mi := &file_config_def_default_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_File.ProtoReflect.Descriptor instead.
func (*Log_File) Descriptor() ([]byte, []int) {
	return file_config_def_default_v1_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Log_File) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_File) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log_File) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *Log_File) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Log_File) GetRotateTime() *durationpb.Duration {
	if x != nil {
		return x.RotateTime
	}
	return nil
}

func (x *Log_File) GetRotateSize() int64 {
	if x != nil {
		return x.RotateSize
	}
	return 0
}

func (x *Log_File) GetStorageAge() *durationpb.Duration {
	if x != nil {
		return x.StorageAge
	}
	return nil
}

func (x *Log_File) GetStorageCounter() uint32 {
	if x != nil {
		return x.StorageCounter
	}
	return 0
}

var File_config_def_default_v1_proto protoreflect.FileDescriptor

var file_config_def_default_v1_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x66, 0x2f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6b,
	0x69, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69,
	0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x12, 0x32, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0xd9, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69,
	0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12,
	0x35, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x52, 0x07, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74,
	0x4d, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x52, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74,
	0x4d, 0x71, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x22, 0x73, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0xb1, 0x01,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x6b, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc5, 0x06, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x79, 0x6c, 0x6f,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x79, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x67, 0x72, 0x61, 0x79,
	0x6c, 0x6f, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x61, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x1a, 0xa5, 0x01, 0x0a, 0x07, 0x47,
	0x72, 0x61, 0x79, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0xa4, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52,
	0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x22, 0xe0, 0x03, 0x0a, 0x05, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3e, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x3c, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xfb, 0x03, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a,
	0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xcd, 0x02, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d,
	0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x70, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x64, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2d,
	0x62, 0x69, 0x7a, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64,
	0x65, 0x66, 0x3b, 0x64, 0x65, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_def_default_v1_proto_rawDescOnce sync.Once
	file_config_def_default_v1_proto_rawDescData = file_config_def_default_v1_proto_rawDesc
)

func file_config_def_default_v1_proto_rawDescGZIP() []byte {
	file_config_def_default_v1_proto_rawDescOnce.Do(func() {
		file_config_def_default_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_def_default_v1_proto_rawDescData)
	})
	return file_config_def_default_v1_proto_rawDescData
}

var file_config_def_default_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_def_default_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_config_def_default_v1_proto_goTypes = []interface{}{
	(Log_LogLevelEnum)(0),       // 0: kit.default.configv1.Log.LogLevelEnum
	(*Server)(nil),              // 1: kit.default.configv1.Server
	(*Tracing)(nil),             // 2: kit.default.configv1.Tracing
	(*Registry)(nil),            // 3: kit.default.configv1.Registry
	(*Data)(nil),                // 4: kit.default.configv1.Data
	(*RabbitMQ)(nil),            // 5: kit.default.configv1.RabbitMQ
	(*ExchangeConfig)(nil),      // 6: kit.default.configv1.ExchangeConfig
	(*QueueConfig)(nil),         // 7: kit.default.configv1.QueueConfig
	(*ConsumeConfig)(nil),       // 8: kit.default.configv1.ConsumeConfig
	(*Log)(nil),                 // 9: kit.default.configv1.Log
	(*Redis)(nil),               // 10: kit.default.configv1.Redis
	(*Mongo)(nil),               // 11: kit.default.configv1.Mongo
	(*Database)(nil),            // 12: kit.default.configv1.Database
	(*Profile)(nil),             // 13: kit.default.configv1.Profile
	(*Log_Console)(nil),         // 14: kit.default.configv1.Log.Console
	(*Log_Graylog)(nil),         // 15: kit.default.configv1.Log.Graylog
	(*Log_File)(nil),            // 16: kit.default.configv1.Log.File
	(*durationpb.Duration)(nil), // 17: google.protobuf.Duration
}
var file_config_def_default_v1_proto_depIdxs = []int32{
	3,  // 0: kit.default.configv1.Server.http:type_name -> kit.default.configv1.Registry
	3,  // 1: kit.default.configv1.Server.grpc:type_name -> kit.default.configv1.Registry
	17, // 2: kit.default.configv1.Registry.timeout:type_name -> google.protobuf.Duration
	12, // 3: kit.default.configv1.Data.database:type_name -> kit.default.configv1.Database
	10, // 4: kit.default.configv1.Data.redis:type_name -> kit.default.configv1.Redis
	11, // 5: kit.default.configv1.Data.mongodb:type_name -> kit.default.configv1.Mongo
	5,  // 6: kit.default.configv1.Data.rabbitMq:type_name -> kit.default.configv1.RabbitMQ
	17, // 7: kit.default.configv1.RabbitMQ.heartbeat:type_name -> google.protobuf.Duration
	14, // 8: kit.default.configv1.Log.console:type_name -> kit.default.configv1.Log.Console
	15, // 9: kit.default.configv1.Log.graylog:type_name -> kit.default.configv1.Log.Graylog
	16, // 10: kit.default.configv1.Log.file:type_name -> kit.default.configv1.Log.File
	17, // 11: kit.default.configv1.Redis.read_timeout:type_name -> google.protobuf.Duration
	17, // 12: kit.default.configv1.Redis.write_timeout:type_name -> google.protobuf.Duration
	17, // 13: kit.default.configv1.Redis.dial_timeout:type_name -> google.protobuf.Duration
	17, // 14: kit.default.configv1.Mongo.connect_timeout:type_name -> google.protobuf.Duration
	17, // 15: kit.default.configv1.Mongo.heartbeat_interval:type_name -> google.protobuf.Duration
	17, // 16: kit.default.configv1.Mongo.max_conn_idle_time:type_name -> google.protobuf.Duration
	17, // 17: kit.default.configv1.Mongo.timeout:type_name -> google.protobuf.Duration
	17, // 18: kit.default.configv1.Database.conn_max_lifetime:type_name -> google.protobuf.Duration
	17, // 19: kit.default.configv1.Database.conn_max_idle_time:type_name -> google.protobuf.Duration
	17, // 20: kit.default.configv1.Log.File.rotate_time:type_name -> google.protobuf.Duration
	17, // 21: kit.default.configv1.Log.File.storage_age:type_name -> google.protobuf.Duration
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_config_def_default_v1_proto_init() }
func file_config_def_default_v1_proto_init() {
	if File_config_def_default_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_def_default_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabbitMQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mongo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Console); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Graylog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_def_default_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_def_default_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_def_default_v1_proto_goTypes,
		DependencyIndexes: file_config_def_default_v1_proto_depIdxs,
		EnumInfos:         file_config_def_default_v1_proto_enumTypes,
		MessageInfos:      file_config_def_default_v1_proto_msgTypes,
	}.Build()
	File_config_def_default_v1_proto = out.File
	file_config_def_default_v1_proto_rawDesc = nil
	file_config_def_default_v1_proto_goTypes = nil
	file_config_def_default_v1_proto_depIdxs = nil
}
